CREATE EXTERNAL TABLE IF NOT EXISTS known_issues_table_name(issue_id string, component string, summary string, description string, keywords array<string>, keywords_text string, knowledge_center_links array<string>) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe' WITH SERDEPROPERTIES ('ignore.malformed.json' = 'true') LOCATION 's3_location_known_issues'
CREATE EXTERNAL TABLE IF NOT EXISTS logs_table_name(data string COMMENT 'from deserializer') STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat' LOCATION 'logs_location'
SELECT k.issue_id AS issue_id,k.unnested_keywords AS matched_keyword,emr."data" AS data,emr."$PATH" AS filepath FROM "logs_table_name" emr JOIN (SELECT 'custom_keyword' as issue_id,unnested_keywords FROM UNNEST(?) AS t(unnested_keywords) UNION ALL SELECT issue_id,unnested_keywords FROM known_issues_table_name CROSS JOIN UNNEST(keywords) AS t(unnested_keywords)) k ON strpos(emr."data", k.unnested_keywords) > 0 WHERE regexp_like(emr."data", ?)
SELECT k.issue_id AS issue_id,k.unnested_keywords AS matched_keyword,emr."data" AS data,emr."$PATH" AS filepath FROM "logs_table_name" emr JOIN (SELECT issue_id,unnested_keywords FROM known_issues_table_name CROSS JOIN UNNEST(keywords) AS t(unnested_keywords)) k ON strpos(emr."data", k.unnested_keywords) > 0
SELECT k.issue_id AS issue_id,k.unnested_keywords AS matched_keyword,emr."data" AS data,emr."$PATH" AS filepath FROM "logs_table_name" emr JOIN (SELECT issue_id,unnested_keywords FROM known_issues_table_name CROSS JOIN UNNEST(keywords) AS t(unnested_keywords)) k ON strpos(emr."data", k.unnested_keywords) > 0 WHERE regexp_like(emr."data", ?)
SELECT k.issue_id AS issue_id,k.unnested_keywords AS matched_keyword,emr."data" AS data,emr."$PATH" AS filepath FROM "logs_table_name" emr JOIN (SELECT 'custom_keyword' as issue_id,unnested_keywords FROM UNNEST(?) AS t(unnested_keywords) UNION ALL SELECT issue_id,unnested_keywords FROM known_issues_table_name CROSS JOIN UNNEST(keywords) AS t(unnested_keywords)) k ON strpos(emr."data", k.unnested_keywords) > 0
CREATE EXTERNAL TABLE IF NOT EXISTS emr_log_analysis_table_name( issue_id STRING, matched_keyword STRING, Data STRING, filepath STRING) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde' LOCATION 'athena_output_location' TBLPROPERTIES ("skip.header.line.count"="1")
select results.issue_id,results.matched_keyword,count(results.matched_keyword) as occurrence_count,km.summary,km.description,km.knowledge_center_links from emr_log_analysis_table_name results left outer join known_issues_table_name km ON results.issue_id = km.issue_id WHERE results.issue_id IS NOT NULL AND results.issue_id != '' AND results.issue_id NOT LIKE '%hive%' AND results.issue_id NOT LIKE '%varchar%' AND (results.issue_id LIKE 'spark-%' OR results.issue_id LIKE 'yarn-%' OR results.issue_id LIKE 'hbase-%' OR results.issue_id LIKE 'hadoop-%' OR results.issue_id LIKE 'emr%-%') group by results.issue_id,results.matched_keyword,km.summary,km.description,km.knowledge_center_links order by occurrence_count DESC
select results.issue_id,results.matched_keyword,count(results.matched_keyword) as occurrence_count,km.summary,km.description,km.knowledge_center_links from emr_log_analysis_table_name results left outer join known_issues_table_name km ON results.issue_id = km.issue_id WHERE results.issue_id IS NOT NULL AND results.issue_id != '' AND results.issue_id NOT LIKE '%hive%' AND results.issue_id NOT LIKE '%varchar%' AND (results.issue_id LIKE 'spark-%' OR results.issue_id LIKE 'yarn-%' OR results.issue_id LIKE 'hbase-%' OR results.issue_id LIKE 'hadoop-%' OR results.issue_id LIKE 'emr%-%') group by results.issue_id,results.matched_keyword,km.summary,km.description,km.knowledge_center_links order by issue_id ASC
select filepath, count(issue_id) as occurrence_count,array_agg(distinct(matched_keyword)) as matched_keyword from emr_log_analysis_table_name WHERE regexp_like(filepath,'.csv') AND filepath not like '%metadata' group by filepath order by occurrence_count DESC