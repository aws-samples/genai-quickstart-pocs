"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Logger = exports.LOG_LEVELS = void 0;
const aws_sdk_1 = require("aws-sdk");
exports.LOG_LEVELS = {
    DEBUG: 'debug',
    INFO: 'info',
    WARN: 'warn',
    ERROR: 'error',
    CRITICAL: 'critical'
};
class Logger {
    constructor(logGroupName = '/aws/lambda/investment-ai-agent', environment = process.env.NODE_ENV || 'development', version = process.env.APP_VERSION || '1.0.0') {
        this.cloudWatchLogs = new aws_sdk_1.CloudWatchLogs({
            region: process.env.AWS_REGION || 'us-east-1'
        });
        this.logGroupName = logGroupName;
        this.logStreamName = `${environment}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        this.environment = environment;
        this.version = version;
        this.initializeLogStream();
    }
    async initializeLogStream() {
        try {
            // Create log group if it doesn't exist
            await this.cloudWatchLogs.createLogGroup({
                logGroupName: this.logGroupName
            }).promise().catch(err => {
                if (err.code !== 'ResourceAlreadyExistsException') {
                    throw err;
                }
            });
            // Create log stream
            await this.cloudWatchLogs.createLogStream({
                logGroupName: this.logGroupName,
                logStreamName: this.logStreamName
            }).promise().catch(err => {
                if (err.code !== 'ResourceAlreadyExistsException') {
                    throw err;
                }
            });
        }
        catch (error) {
            console.error('Failed to initialize CloudWatch log stream:', error);
        }
    }
    createStructuredLogEntry(entry) {
        return {
            ...entry,
            environment: this.environment,
            version: this.version,
            source: 'investment-ai-agent',
            tags: this.generateTags(entry)
        };
    }
    generateTags(entry) {
        const tags = [
            `level:${entry.level}`,
            `service:${entry.service}`,
            `environment:${this.environment}`
        ];
        if (entry.userId) {
            tags.push(`user:${entry.userId}`);
        }
        if (entry.operation) {
            tags.push(`operation:${entry.operation}`);
        }
        return tags;
    }
    async sendToCloudWatch(entries) {
        try {
            const logEvents = entries.map(entry => ({
                timestamp: entry.timestamp.getTime(),
                message: JSON.stringify(entry)
            }));
            const params = {
                logGroupName: this.logGroupName,
                logStreamName: this.logStreamName,
                logEvents,
                sequenceToken: this.sequenceToken
            };
            const result = await this.cloudWatchLogs.putLogEvents(params).promise();
            this.sequenceToken = result.nextSequenceToken;
        }
        catch (error) {
            console.error('Failed to send logs to CloudWatch:', error);
            // Fallback to console logging
            entries.forEach(entry => {
                console.log(JSON.stringify(entry));
            });
        }
    }
    async log(entry) {
        const structuredEntry = this.createStructuredLogEntry(entry);
        // Console output for development
        if (this.environment === 'development') {
            console.log(`[${structuredEntry.timestamp.toISOString()}] ${structuredEntry.level.toUpperCase()} [${structuredEntry.service}:${structuredEntry.operation}] ${structuredEntry.message}`, structuredEntry.metadata || '');
        }
        // Send to CloudWatch
        await this.sendToCloudWatch([structuredEntry]);
    }
    async debug(service, operation, message, metadata, context) {
        await this.log({
            timestamp: new Date(),
            level: 'DEBUG',
            service,
            operation,
            message,
            metadata,
            ...context
        });
    }
    async info(service, operation, message, metadata, context) {
        await this.log({
            timestamp: new Date(),
            level: 'INFO',
            service,
            operation,
            message,
            metadata,
            ...context
        });
    }
    async warn(service, operation, message, metadata, context) {
        await this.log({
            timestamp: new Date(),
            level: 'WARN',
            service,
            operation,
            message,
            metadata,
            ...context
        });
    }
    async error(service, operation, message, error, metadata, context) {
        const errorMetadata = {
            ...metadata,
            error: error ? {
                name: error.name,
                message: error.message,
                stack: error.stack
            } : undefined
        };
        await this.log({
            timestamp: new Date(),
            level: 'ERROR',
            service,
            operation,
            message,
            metadata: errorMetadata,
            ...context
        });
    }
    async critical(service, operation, message, error, metadata, context) {
        const errorMetadata = {
            ...metadata,
            error: error ? {
                name: error.name,
                message: error.message,
                stack: error.stack
            } : undefined
        };
        await this.log({
            timestamp: new Date(),
            level: 'CRITICAL',
            service,
            operation,
            message,
            metadata: errorMetadata,
            ...context
        });
    }
    async batch(entries) {
        const structuredEntries = entries.map(entry => this.createStructuredLogEntry(entry));
        await this.sendToCloudWatch(structuredEntries);
    }
}
exports.Logger = Logger;
// Singleton instance
exports.logger = new Logger();
//# sourceMappingURL=data:application/json;base64,