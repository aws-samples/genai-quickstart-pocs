"use strict";
/**
 * Tests for the proprietary data service
 */
Object.defineProperty(exports, "__esModule", { value: true });
const proprietary_data_service_1 = require("../proprietary-data-service");
// Create a mock File class for Node.js environment
class MockFile {
    constructor(bits, name, options) {
        this.name = name;
        this.content = bits[0] || '';
        // Calculate size based on content
        if (typeof this.content === 'string') {
            this.size = this.content.length;
        }
        else if (this.content instanceof ArrayBuffer) {
            this.size = this.content.byteLength;
        }
        else {
            this.size = 0;
        }
        this.type = options?.type || '';
        this.lastModified = Date.now();
    }
    // Mock methods that would be available on a File object
    text() {
        if (typeof this.content === 'string') {
            return Promise.resolve(this.content);
        }
        return Promise.resolve('');
    }
    arrayBuffer() {
        if (this.content instanceof ArrayBuffer) {
            return Promise.resolve(this.content);
        }
        // Convert string to ArrayBuffer if needed
        if (typeof this.content === 'string') {
            const encoder = new TextEncoder();
            return Promise.resolve(encoder.encode(this.content).buffer);
        }
        return Promise.resolve(new ArrayBuffer(0));
    }
}
describe('ProprietaryDataService', () => {
    let service;
    // Mock the internal methods of ProprietaryDataService
    beforeEach(() => {
        service = new proprietary_data_service_1.ProprietaryDataService('test-bucket');
        // Mock the uploadToS3 method
        service.uploadToS3 = jest.fn().mockResolvedValue(true);
        // Mock the storeMetadata method
        service.storeMetadata = jest.fn().mockResolvedValue(true);
        // Mock the queueFileForProcessing method to avoid setTimeout
        service.queueFileForProcessing = jest.fn();
    });
    describe('uploadFile', () => {
        it('should validate file type', async () => {
            // Create test file with unsupported extension
            const file = new MockFile(['test content'], 'test.xyz', { type: 'text/plain' });
            const metadata = {
                source: 'test',
                type: 'proprietary',
                timestamp: new Date(),
                confidentiality: 'private',
                tags: ['test']
            };
            const accessControl = {
                visibility: 'user',
                allowedUsers: ['user1']
            };
            const result = await service.uploadFile(file, metadata, 'user1', 'org1', accessControl);
            expect(result.success).toBe(false);
            expect(result.error).toContain('Unsupported file type');
        });
        it('should accept valid CSV file', async () => {
            // Create test CSV file
            const csvContent = 'id,name,value\n1,test,100\n2,test2,200';
            const file = new MockFile([csvContent], 'test.csv', { type: 'text/csv' });
            const metadata = {
                source: 'test',
                type: 'proprietary',
                timestamp: new Date(),
                confidentiality: 'private',
                tags: ['test']
            };
            const accessControl = {
                visibility: 'user',
                allowedUsers: ['user1']
            };
            const result = await service.uploadFile(file, metadata, 'user1', 'org1', accessControl);
            expect(result.success).toBe(true);
            expect(result.documentId).toBeDefined();
            expect(result.processingStatus).toBe('queued');
            expect(service.queueFileForProcessing).toHaveBeenCalled();
        });
    });
    describe('normalizeData', () => {
        it('should normalize tabular data', async () => {
            const data = [
                { name: ' John ', age: '30', active: 'true' },
                { name: ' Jane ', age: '25', active: 'false' }
            ];
            const options = {
                trimWhitespace: true,
                textCase: 'upper'
            };
            const result = await service.normalizeData(data, options);
            expect(result.success).toBe(true);
            expect(result.normalizedData).toEqual([
                { name: 'JOHN', age: '30', active: 'TRUE' },
                { name: 'JANE', age: '25', active: 'FALSE' }
            ]);
            expect(result.transformations.length).toBeGreaterThan(0);
        });
        it('should handle null values', async () => {
            const data = [
                { name: 'John', age: null, active: true },
                { name: 'Jane', age: 25, active: false }
            ];
            const options = {
                handleNulls: 'replace',
                nullReplacement: 0
            };
            const result = await service.normalizeData(data, options);
            expect(result.success).toBe(true);
            expect(result.normalizedData).toEqual([
                { name: 'John', age: 0, active: true },
                { name: 'Jane', age: 25, active: false }
            ]);
        });
        it('should handle unsupported data format', async () => {
            const data = 'not an object or array';
            const options = {
                trimWhitespace: true
            };
            const result = await service.normalizeData(data, options);
            expect(result.success).toBe(false);
            expect(result.error).toContain('Unsupported data format');
        });
    });
    describe('processFile', () => {
        beforeEach(() => {
            // Mock the getFileMetadata method
            service.getFileMetadata = jest.fn().mockResolvedValue({
                id: 'test-id',
                fileName: 'test.csv',
                fileType: 'csv',
                uploadDate: new Date(),
                userId: 'user1',
                organizationId: 'org1',
                metadata: {
                    source: 'test',
                    type: 'proprietary',
                    timestamp: new Date(),
                    confidentiality: 'private',
                    tags: ['test']
                },
                status: 'uploaded',
                accessControl: {
                    visibility: 'user',
                    allowedUsers: ['user1']
                },
                storageLocation: 'org1/user1/test-id/test.csv'
            });
            // Mock the updateFileStatus method
            service.updateFileStatus = jest.fn().mockResolvedValue(undefined);
            // Mock the extractData method
            service.extractData = jest.fn().mockResolvedValue({
                success: true,
                dataType: 'tabular',
                extractedData: [{ id: 1, name: 'test', value: 100 }],
                processingTime: 100,
                extractionMethod: 'csv-parser'
            });
            // Mock the storeExtractedData method
            service.storeExtractedData = jest.fn().mockResolvedValue(undefined);
        });
        it('should process a file successfully', async () => {
            const result = await service.processFile('test-id');
            expect(result.success).toBe(true);
            expect(result.processingStatus).toBe('completed');
            expect(service.updateFileStatus).toHaveBeenCalledWith('test-id', 'processing');
            expect(service.extractData).toHaveBeenCalled();
            expect(service.storeExtractedData).toHaveBeenCalled();
            expect(service.updateFileStatus).toHaveBeenCalledWith('test-id', 'processed');
        });
        it('should handle extraction failure', async () => {
            // Override the extractData mock to return failure
            service.extractData = jest.fn().mockResolvedValue({
                success: false,
                dataType: 'unknown',
                error: 'Extraction failed',
                processingTime: 100,
                extractionMethod: 'failed'
            });
            const result = await service.processFile('test-id');
            expect(result.success).toBe(false);
            expect(result.error).toBe('Extraction failed');
            expect(result.processingStatus).toBe('failed');
            expect(service.updateFileStatus).toHaveBeenCalledWith('test-id', 'failed', 'Extraction failed');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHJpZXRhcnktZGF0YS1zZXJ2aWNlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvX190ZXN0c19fL3Byb3ByaWV0YXJ5LWRhdGEtc2VydmljZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwwRUFBcUU7QUFJckUsbURBQW1EO0FBQ25ELE1BQU0sUUFBUTtJQU9aLFlBQVksSUFBaUMsRUFBRSxJQUFZLEVBQUUsT0FBMkI7UUFDdEYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTdCLGtDQUFrQztRQUNsQyxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztTQUNqQzthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxXQUFXLEVBQUU7WUFDOUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztTQUNyQzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7U0FDZjtRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELHdEQUF3RDtJQUN4RCxJQUFJO1FBQ0YsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQ3BDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7UUFDRCxPQUFPLE9BQU8sQ0FBQyxPQUFP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QyxTQUFTLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDM0csQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0cyBmb3IgdGhlIHByb3ByaWV0YXJ5IGRhdGEgc2VydmljZVxuICovXG5cbmltcG9ydCB7IFByb3ByaWV0YXJ5RGF0YVNlcnZpY2UgfSBmcm9tICcuLi9wcm9wcmlldGFyeS1kYXRhLXNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjZXNzQ29udHJvbCB9IGZyb20gJy4uLy4uL21vZGVscy9wcm9wcmlldGFyeS1kYXRhJztcbmltcG9ydCB7IERhdGFNZXRhZGF0YSB9IGZyb20gJy4uLy4uL21vZGVscy9zZXJ2aWNlcyc7XG5cbi8vIENyZWF0ZSBhIG1vY2sgRmlsZSBjbGFzcyBmb3IgTm9kZS5qcyBlbnZpcm9ubWVudFxuY2xhc3MgTW9ja0ZpbGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNpemU6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xuICBsYXN0TW9kaWZpZWQ6IG51bWJlcjtcbiAgY29udGVudDogc3RyaW5nIHwgQXJyYXlCdWZmZXI7XG4gIFxuICBjb25zdHJ1Y3RvcihiaXRzOiBBcnJheTxzdHJpbmcgfCBBcnJheUJ1ZmZlcj4sIG5hbWU6IHN0cmluZywgb3B0aW9ucz86IHsgdHlwZT86IHN0cmluZyB9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNvbnRlbnQgPSBiaXRzWzBdIHx8ICcnO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBzaXplIGJhc2VkIG9uIGNvbnRlbnRcbiAgICBpZiAodHlwZW9mIHRoaXMuY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuY29udGVudC5sZW5ndGg7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnRlbnQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgdGhpcy5zaXplID0gdGhpcy5jb250ZW50LmJ5dGVMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIFxuICAgIHRoaXMudHlwZSA9IG9wdGlvbnM/LnR5cGUgfHwgJyc7XG4gICAgdGhpcy5sYXN0TW9kaWZpZWQgPSBEYXRlLm5vdygpO1xuICB9XG4gIFxuICAvLyBNb2NrIG1ldGhvZHMgdGhhdCB3b3VsZCBiZSBhdmFpbGFibGUgb24gYSBGaWxlIG9iamVjdFxuICB0ZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICB9XG4gIFxuICBhcnJheUJ1ZmZlcigpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgaWYgKHRoaXMuY29udGVudCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29udGVudCk7XG4gICAgfVxuICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIEFycmF5QnVmZmVyIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgdGhpcy5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbmNvZGVyLmVuY29kZSh0aGlzLmNvbnRlbnQpLmJ1ZmZlcik7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxufVxuXG5kZXNjcmliZSgnUHJvcHJpZXRhcnlEYXRhU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNlcnZpY2U6IFByb3ByaWV0YXJ5RGF0YVNlcnZpY2U7XG4gIFxuICAvLyBNb2NrIHRoZSBpbnRlcm5hbCBtZXRob2RzIG9mIFByb3ByaWV0YXJ5RGF0YVNlcnZpY2VcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc2VydmljZSA9IG5ldyBQcm9wcmlldGFyeURhdGFTZXJ2aWNlKCd0ZXN0LWJ1Y2tldCcpO1xuICAgIFxuICAgIC8vIE1vY2sgdGhlIHVwbG9hZFRvUzMgbWV0aG9kXG4gICAgKHNlcnZpY2UgYXMgYW55KS51cGxvYWRUb1MzID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuICAgIFxuICAgIC8vIE1vY2sgdGhlIHN0b3JlTWV0YWRhdGEgbWV0aG9kXG4gICAgKHNlcnZpY2UgYXMgYW55KS5zdG9yZU1ldGFkYXRhID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuICAgIFxuICAgIC8vIE1vY2sgdGhlIHF1ZXVlRmlsZUZvclByb2Nlc3NpbmcgbWV0aG9kIHRvIGF2b2lkIHNldFRpbWVvdXRcbiAgICAoc2VydmljZSBhcyBhbnkpLnF1ZXVlRmlsZUZvclByb2Nlc3NpbmcgPSBqZXN0LmZuKCk7XG4gIH0pO1xuICBcbiAgZGVzY3JpYmUoJ3VwbG9hZEZpbGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBmaWxlIHR5cGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgdGVzdCBmaWxlIHdpdGggdW5zdXBwb3J0ZWQgZXh0ZW5zaW9uXG4gICAgICBjb25zdCBmaWxlID0gbmV3IE1vY2tGaWxlKFsndGVzdCBjb250ZW50J10sICd0ZXN0Lnh5eicsIHsgdHlwZTogJ3RleHQvcGxhaW4nIH0pIGFzIHVua25vd24gYXMgRmlsZTtcbiAgICAgIFxuICAgICAgY29uc3QgbWV0YWRhdGE6IERhdGFNZXRhZGF0YSA9IHtcbiAgICAgICAgc291cmNlOiAndGVzdCcsXG4gICAgICAgIHR5cGU6ICdwcm9wcmlldGFyeScsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgY29uZmlkZW50aWFsaXR5OiAncHJpdmF0ZScsXG4gICAgICAgIHRhZ3M6IFsndGVzdCddXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCBhY2Nlc3NDb250cm9sOiBBY2Nlc3NDb250cm9sID0ge1xuICAgICAgICB2aXNpYmlsaXR5OiAndXNlcicsXG4gICAgICAgIGFsbG93ZWRVc2VyczogWyd1c2VyMSddXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLnVwbG9hZEZpbGUoXG4gICAgICAgIGZpbGUsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAndXNlcjEnLFxuICAgICAgICAnb3JnMScsXG4gICAgICAgIGFjY2Vzc0NvbnRyb2xcbiAgICAgICk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ1Vuc3VwcG9ydGVkIGZpbGUgdHlwZScpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgYWNjZXB0IHZhbGlkIENTViBmaWxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIHRlc3QgQ1NWIGZpbGVcbiAgICAgIGNvbnN0IGNzdkNvbnRlbnQgPSAnaWQsbmFtZSx2YWx1ZVxcbjEsdGVzdCwxMDBcXG4yLHRlc3QyLDIwMCc7XG4gICAgICBjb25zdCBmaWxlID0gbmV3IE1vY2tGaWxlKFtjc3ZDb250ZW50XSwgJ3Rlc3QuY3N2JywgeyB0eXBlOiAndGV4dC9jc3YnIH0pIGFzIHVua25vd24gYXMgRmlsZTtcbiAgICAgIFxuICAgICAgY29uc3QgbWV0YWRhdGE6IERhdGFNZXRhZGF0YSA9IHtcbiAgICAgICAgc291cmNlOiAndGVzdCcsXG4gICAgICAgIHR5cGU6ICdwcm9wcmlldGFyeScsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgY29uZmlkZW50aWFsaXR5OiAncHJpdmF0ZScsXG4gICAgICAgIHRhZ3M6IFsndGVzdCddXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCBhY2Nlc3NDb250cm9sOiBBY2Nlc3NDb250cm9sID0ge1xuICAgICAgICB2aXNpYmlsaXR5OiAndXNlcicsXG4gICAgICAgIGFsbG93ZWRVc2VyczogWyd1c2VyMSddXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLnVwbG9hZEZpbGUoXG4gICAgICAgIGZpbGUsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAndXNlcjEnLFxuICAgICAgICAnb3JnMScsXG4gICAgICAgIGFjY2Vzc0NvbnRyb2xcbiAgICAgICk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZG9jdW1lbnRJZCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucHJvY2Vzc2luZ1N0YXR1cykudG9CZSgncXVldWVkJyk7XG4gICAgICBleHBlY3QoKHNlcnZpY2UgYXMgYW55KS5xdWV1ZUZpbGVGb3JQcm9jZXNzaW5nKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuICBcbiAgZGVzY3JpYmUoJ25vcm1hbGl6ZURhdGEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBub3JtYWxpemUgdGFidWxhciBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IFtcbiAgICAgICAgeyBuYW1lOiAnIEpvaG4gJywgYWdlOiAnMzAnLCBhY3RpdmU6ICd0cnVlJyB9LFxuICAgICAgICB7IG5hbWU6ICcgSmFuZSAnLCBhZ2U6ICcyNScsIGFjdGl2ZTogJ2ZhbHNlJyB9XG4gICAgICBdO1xuICAgICAgXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICB0cmltV2hpdGVzcGFjZTogdHJ1ZSxcbiAgICAgICAgdGV4dENhc2U6ICd1cHBlcicgYXMgY29uc3RcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2Uubm9ybWFsaXplRGF0YShkYXRhLCBvcHRpb25zKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5ub3JtYWxpemVkRGF0YSkudG9FcXVhbChbXG4gICAgICAgIHsgbmFtZTogJ0pPSE4nLCBhZ2U6ICczMCcsIGFjdGl2ZTogJ1RSVUUnIH0sXG4gICAgICAgIHsgbmFtZTogJ0pBTkUnLCBhZ2U6ICcyNScsIGFjdGl2ZTogJ0ZBTFNFJyB9XG4gICAgICBdKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudHJhbnNmb3JtYXRpb25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG51bGwgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IFtcbiAgICAgICAgeyBuYW1lOiAnSm9obicsIGFnZTogbnVsbCwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIHsgbmFtZTogJ0phbmUnLCBhZ2U6IDI1LCBhY3RpdmU6IGZhbHNlIH1cbiAgICAgIF07XG4gICAgICBcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGhhbmRsZU51bGxzOiAncmVwbGFjZScgYXMgY29uc3QsXG4gICAgICAgIG51bGxSZXBsYWNlbWVudDogMFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5ub3JtYWxpemVEYXRhKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0Lm5vcm1hbGl6ZWREYXRhKS50b0VxdWFsKFtcbiAgICAgICAgeyBuYW1lOiAnSm9obicsIGFnZTogMCwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIHsgbmFtZTogJ0phbmUnLCBhZ2U6IDI1LCBhY3RpdmU6IGZhbHNlIH1cbiAgICAgIF0pO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHVuc3VwcG9ydGVkIGRhdGEgZm9ybWF0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9ICdub3QgYW4gb2JqZWN0IG9yIGFycmF5JztcbiAgICAgIFxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgdHJpbVdoaXRlc3BhY2U6IHRydWVcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2Uubm9ybWFsaXplRGF0YShkYXRhLCBvcHRpb25zKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignVW5zdXBwb3J0ZWQgZGF0YSBmb3JtYXQnKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgncHJvY2Vzc0ZpbGUnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAvLyBNb2NrIHRoZSBnZXRGaWxlTWV0YWRhdGEgbWV0aG9kXG4gICAgICAoc2VydmljZSBhcyBhbnkpLmdldEZpbGVNZXRhZGF0YSA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGlkOiAndGVzdC1pZCcsXG4gICAgICAgIGZpbGVOYW1lOiAndGVzdC5jc3YnLFxuICAgICAgICBmaWxlVHlwZTogJ2NzdicsXG4gICAgICAgIHVwbG9hZERhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIHVzZXJJZDogJ3VzZXIxJyxcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6ICdvcmcxJyxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICBzb3VyY2U6ICd0ZXN0JyxcbiAgICAgICAgICB0eXBlOiAncHJvcHJpZXRhcnknLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBjb25maWRlbnRpYWxpdHk6ICdwcml2YXRlJyxcbiAgICAgICAgICB0YWdzOiBbJ3Rlc3QnXVxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXM6ICd1cGxvYWRlZCcsXG4gICAgICAgIGFjY2Vzc0NvbnRyb2w6IHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiAndXNlcicsXG4gICAgICAgICAgYWxsb3dlZFVzZXJzOiBbJ3VzZXIxJ11cbiAgICAgICAgfSxcbiAgICAgICAgc3RvcmFnZUxvY2F0aW9uOiAnb3JnMS91c2VyMS90ZXN0LWlkL3Rlc3QuY3N2J1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIE1vY2sgdGhlIHVwZGF0ZUZpbGVTdGF0dXMgbWV0aG9kXG4gICAgICAoc2VydmljZSBhcyBhbnkpLnVwZGF0ZUZpbGVTdGF0dXMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgIFxuICAgICAgLy8gTW9jayB0aGUgZXh0cmFjdERhdGEgbWV0aG9kXG4gICAgICAoc2VydmljZSBhcyBhbnkpLmV4dHJhY3REYXRhID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YVR5cGU6ICd0YWJ1bGFyJyxcbiAgICAgICAgZXh0cmFjdGVkRGF0YTogW3sgaWQ6IDEsIG5hbWU6ICd0ZXN0JywgdmFsdWU6IDEwMCB9XSxcbiAgICAgICAgcHJvY2Vzc2luZ1RpbWU6IDEwMCxcbiAgICAgICAgZXh0cmFjdGlvbk1ldGhvZDogJ2Nzdi1wYXJzZXInXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gTW9jayB0aGUgc3RvcmVFeHRyYWN0ZWREYXRhIG1ldGhvZFxuICAgICAgKHNlcnZpY2UgYXMgYW55KS5zdG9yZUV4dHJhY3RlZERhdGEgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHByb2Nlc3MgYSBmaWxlIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UucHJvY2Vzc0ZpbGUoJ3Rlc3QtaWQnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5wcm9jZXNzaW5nU3RhdHVzKS50b0JlKCdjb21wbGV0ZWQnKTtcbiAgICAgIGV4cGVjdCgoc2VydmljZSBhcyBhbnkpLnVwZGF0ZUZpbGVTdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0LWlkJywgJ3Byb2Nlc3NpbmcnKTtcbiAgICAgIGV4cGVjdCgoc2VydmljZSBhcyBhbnkpLmV4dHJhY3REYXRhKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoKHNlcnZpY2UgYXMgYW55KS5zdG9yZUV4dHJhY3RlZERhdGEpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdCgoc2VydmljZSBhcyBhbnkpLnVwZGF0ZUZpbGVTdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0LWlkJywgJ3Byb2Nlc3NlZCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGV4dHJhY3Rpb24gZmFpbHVyZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE92ZXJyaWRlIHRoZSBleHRyYWN0RGF0YSBtb2NrIHRvIHJldHVybiBmYWlsdXJlXG4gICAgICAoc2VydmljZSBhcyBhbnkpLmV4dHJhY3REYXRhID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGRhdGFUeXBlOiAndW5rbm93bicsXG4gICAgICAgIGVycm9yOiAnRXh0cmFjdGlvbiBmYWlsZWQnLFxuICAgICAgICBwcm9jZXNzaW5nVGltZTogMTAwLFxuICAgICAgICBleHRyYWN0aW9uTWV0aG9kOiAnZmFpbGVkJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UucHJvY2Vzc0ZpbGUoJ3Rlc3QtaWQnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ0V4dHJhY3Rpb24gZmFpbGVkJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnByb2Nlc3NpbmdTdGF0dXMpLnRvQmUoJ2ZhaWxlZCcpO1xuICAgICAgZXhwZWN0KChzZXJ2aWNlIGFzIGFueSkudXBkYXRlRmlsZVN0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QtaWQnLCAnZmFpbGVkJywgJ0V4dHJhY3Rpb24gZmFpbGVkJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il19