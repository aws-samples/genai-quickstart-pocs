"use strict";
/**
 * Tests for the market data service
 */
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const market_data_service_1 = require("../market-data-service");
// Mock implementations
class MockMarketDataProvider {
    async connect(config) {
        return {
            provider: config.provider,
            connected: true,
            connectionId: 'mock-connection-id',
            latency: 10,
            lastUpdated: new Date(),
            activeSymbols: config.symbols.length,
            activeDataTypes: config.dataTypes,
            throttleStatus: {
                requestsPerMinute: 0,
                maxRequestsPerMinute: 5,
                throttled: false
            }
        };
    }
    async disconnect() {
        // Do nothing
    }
    getStatus() {
        return {
            provider: 'mock-provider',
            connected: true,
            connectionId: 'mock-connection-id',
            latency: 10,
            lastUpdated: new Date(),
            activeSymbols: 0,
            activeDataTypes: [],
            throttleStatus: {
                requestsPerMinute: 0,
                maxRequestsPerMinute: 5,
                throttled: false
            }
        };
    }
    async subscribeToData(symbols, dataTypes, interval) {
        // Do nothing
    }
    async unsubscribeFromData(symbols, dataTypes) {
        // Do nothing
    }
    async getHistoricalData(query) {
        return [];
    }
}
class MockMarketDataStorage {
    constructor() {
        this.data = [];
    }
    async initialize(config) {
        // Do nothing
    }
    async storeDataPoint(dataPoint) {
        this.data.push(dataPoint);
    }
    async storeDataPoints(dataPoints) {
        this.data.push(...dataPoints);
    }
    async queryData(query) {
        // Filter data based on query
        const filteredData = this.data.filter(dp => query.symbols.includes(dp.symbol) &&
            query.dataTypes.includes(dp.dataType) &&
            dp.timestamp >= query.timeRange.start &&
            dp.timestamp <= query.timeRange.end);
        return {
            data: filteredData,
            metadata: {
                query,
                count: filteredData.length,
                executionTime: 10
            }
        };
    }
    async deleteData(query) {
        const beforeCount = this.data.length;
        this.data = this.data.filter(dp => !query.symbols.includes(dp.symbol) ||
            !query.dataTypes.includes(dp.dataType) ||
            dp.timestamp < query.timeRange.start ||
            dp.timestamp > query.timeRange.end);
        return beforeCount - this.data.length;
    }
    async getStorageStats() {
        return {
            totalDataPoints: this.data.length,
            oldestDataPoint: new Date(),
            newestDataPoint: new Date(),
            dataPointsByType: {},
            storageSize: 1000
        };
    }
}
class MockMarketAlertService {
    constructor() {
        this.alerts = new Map();
    }
    async createAlert(alertConfig) {
        const id = (0, uuid_1.v4)();
        const now = new Date();
        const newAlert = {
            ...alertConfig,
            id,
            createdAt: now,
            updatedAt: now
        };
        this.alerts.set(id, newAlert);
        return newAlert;
    }
    async updateAlert(alertId, updates) {
        const existingAlert = this.alerts.get(alertId);
        if (!existingAlert) {
            throw new Error(`Alert not found: ${alertId}`);
        }
        const updatedAlert = {
            ...existingAlert,
            ...updates,
            id: existingAlert.id,
            createdAt: existingAlert.createdAt,
            updatedAt: new Date()
        };
        this.alerts.set(alertId, updatedAlert);
        return updatedAlert;
    }
    async deleteAlert(alertId) {
        return this.alerts.delete(alertId);
    }
    async getAlert(alertId) {
        return this.alerts.get(alertId) || null;
    }
    async listAlerts(userId) {
        return Array.from(this.alerts.values()).filter(alert => alert.userId === userId);
    }
    async enableAlert(alertId) {
        return this.updateAlert(alertId, { enabled: true });
    }
    async disableAlert(alertId) {
        return this.updateAlert(alertId, { enabled: false });
    }
    async processDataPoint(dataPoint) {
        return []; // No alerts triggered
    }
}
// Test suite
describe('MarketDataService', () => {
    let marketDataService;
    let mockStorage;
    let mockAlertService;
    let mockProvider;
    beforeEach(async () => {
        // Set up test environment
        mockStorage = new MockMarketDataStorage();
        mockAlertService = new MockMarketAlertService();
        mockProvider = new MockMarketDataProvider();
        marketDataService = new market_data_service_1.MarketDataService(mockStorage, mockAlertService);
        // Initialize service
        const storageConfig = {
            storageType: 'memory',
            retentionPeriod: {
                highResolution: 7,
                lowResolution: 30
            },
            aggregationIntervals: ['1min', '1hour', 'daily'],
            compressionEnabled: false
        };
        await marketDataService.initialize(storageConfig);
        // Register provider
        marketDataService.registerProvider('mock-provider', mockProvider, true);
    });
    test('should connect to market data feed', async () => {
        const feedConfig = {
            provider: 'mock-provider',
            apiKey: 'test-api-key',
            dataTypes: ['price', 'volume'],
            symbols: ['AAPL', 'MSFT'],
            interval: 'daily'
        };
        const status = await marketDataService.connectToFeed(feedConfig);
        expect(status.connected).toBe(true);
        expect(status.provider).toBe('mock-provider');
        expect(status.activeSymbols).toBe(2);
        expect(status.activeDataTypes).toEqual(['price', 'volume']);
    });
    test('should create and retrieve market alerts', async () => {
        const alertConfig = {
            name: 'Test Alert',
            symbol: 'AAPL',
            dataType: 'price',
            condition: 'greater-than',
            threshold: 150,
            enabled: true,
            userId: 'test-user',
            notificationChannels: [
                {
                    type: 'email',
                    destination: 'test@example.com',
                    enabled: true
                }
            ]
        };
        const createdAlert = await marketDataService.createAlert(alertConfig);
        expect(createdAlert.id).toBeDefined();
        expect(createdAlert.name).toBe('Test Alert');
        expect(createdAlert.symbol).toBe('AAPL');
        const retrievedAlert = await marketDataService.getAlert(createdAlert.id);
        expect(retrievedAlert).not.toBeNull();
        expect(retrievedAlert?.id).toBe(createdAlert.id);
        expect(retrievedAlert?.name).toBe('Test Alert');
    });
    // Add more tests as needed
});
//# sourceMappingURL=data:application/json;base64,