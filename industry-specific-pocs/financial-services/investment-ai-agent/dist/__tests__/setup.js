"use strict";
/**
 * Test setup and configuration
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Global test setup
beforeAll(() => {
    // Set test environment variables
    process.env.NODE_ENV = 'test';
    process.env.AWS_REGION = 'us-east-1';
    process.env.JWT_SECRET = 'test-jwt-secret';
});
// Global test cleanup
afterAll(() => {
    // Clean up any global resources
});
// Mock AWS SDK
globals_1.jest.mock('@aws-sdk/client-bedrock-runtime', () => ({
    BedrockRuntimeClient: globals_1.jest.fn().mockImplementation(() => ({
        send: globals_1.jest.fn()
    })),
    InvokeModelCommand: globals_1.jest.fn()
}));
globals_1.jest.mock('@aws-sdk/client-bedrock', () => ({
    BedrockClient: globals_1.jest.fn().mockImplementation(() => ({
        send: globals_1.jest.fn()
    })),
    ListFoundationModelsCommand: globals_1.jest.fn()
}));
// Mock console methods to reduce noise in tests
const originalConsole = { ...console };
beforeEach(() => {
    // Suppress console output in tests unless explicitly needed
    console.log = globals_1.jest.fn();
    console.warn = globals_1.jest.fn();
    console.error = globals_1.jest.fn();
});
afterEach(() => {
    // Restore console methods
    console.log = originalConsole.log;
    console.warn = originalConsole.warn;
    console.error = originalConsole.error;
    // Clear all mocks
    globals_1.jest.clearAllMocks();
});
// Global test utilities
global.testUtils = {
    // Helper to wait for async operations
    wait: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
    // Helper to create mock dates
    mockDate: (dateString) => new Date(dateString),
    // Helper to generate test IDs
    generateTestId: () => `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
};
// Extend Jest matchers
expect.extend({
    toBeValidUUID(received) {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const pass = uuidRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid UUID`,
                pass: true
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid UUID`,
                pass: false
            };
        }
    },
    toBeValidEmail(received) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const pass = emailRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid email`,
                pass: true
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid email`,
                pass: false
            };
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvX190ZXN0c19fL3NldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwyQ0FBcUM7QUFFckMsb0JBQW9CO0FBQ3BCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixpQ0FBaUM7SUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQztJQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUM3QyxDQUFDLENBQUMsQ0FBQztBQUVILHNCQUFzQjtBQUN0QixRQUFRLENBQUMsR0FBRyxFQUFFO0lBQ1osZ0NBQWdDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsZUFBZTtBQUNmLGNBQUksQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsRCxvQkFBb0IsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtLQUNoQixDQUFDLENBQUM7SUFDSCxrQkFBa0IsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO0NBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUosY0FBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLGFBQWEsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtLQUNoQixDQUFDLENBQUM7SUFDSCwyQkFBMkIsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO0NBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBRUosZ0RBQWdEO0FBQ2hELE1BQU0sZUFBZSxHQUFHLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUV2QyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsNERBQTREO0lBQzVELE9BQU8sQ0FBQyxHQUFHLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLDBCQUEwQjtJQUMxQixPQUFPLENBQUMsR0FBRyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUM7SUFDbEMsT0FBTyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDO0lBQ3BDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQztJQUV0QyxrQkFBa0I7SUFDbEIsY0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBRUgsd0JBQXdCO0FBQ3hCLE1BQU0sQ0FBQyxTQUFTLEdBQUc7SUFDakIsc0NBQXNDO0lBQ3RDLElBQUksRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXJFLDhCQUE4QjtJQUM5QixRQUFRLEVBQUUsQ0FBQyxVQUFrQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7SUFFdEQsOEJBQThCO0lBQzlCLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Q0FDdEYsQ0FBQztBQUVGLHVCQUF1QjtBQUN2QixNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ1osYUFBYSxDQUFDLFFBQWdCO1FBQzVCLE1BQU0sU0FBUyxHQUFHLDRFQUE0RSxDQUFDO1FBQy9GLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEMsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPO2dCQUNMLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxZQUFZLFFBQVEseUJBQXlCO2dCQUM1RCxJQUFJLEVBQUUsSUFBSTthQUNYLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTztnQkFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxRQUFRLHFCQUFxQjtnQkFDeEQsSUFBSSxFQUFFLEtBQUs7YUFDWixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsY0FBYyxDQUFDLFFBQWdCO1FBQzdCLE1BQU0sVUFBVSxHQUFHLDRCQUE0QixDQUFDO1FBQ2hELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdkMsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPO2dCQUNMLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxZQUFZLFFBQVEsMEJBQTBCO2dCQUM3RCxJQUFJLEVBQUUsSUFBSTthQUNYLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTztnQkFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxRQUFRLHNCQUFzQjtnQkFDekQsSUFBSSxFQUFFLEtBQUs7YUFDWixDQUFDO1NBQ0g7SUFDSCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0IHNldHVwIGFuZCBjb25maWd1cmF0aW9uXG4gKi9cblxuaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuXG4vLyBHbG9iYWwgdGVzdCBzZXR1cFxuYmVmb3JlQWxsKCgpID0+IHtcbiAgLy8gU2V0IHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuICBwcm9jZXNzLmVudi5BV1NfUkVHSU9OID0gJ3VzLWVhc3QtMSc7XG4gIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAndGVzdC1qd3Qtc2VjcmV0Jztcbn0pO1xuXG4vLyBHbG9iYWwgdGVzdCBjbGVhbnVwXG5hZnRlckFsbCgoKSA9PiB7XG4gIC8vIENsZWFuIHVwIGFueSBnbG9iYWwgcmVzb3VyY2VzXG59KTtcblxuLy8gTW9jayBBV1MgU0RLXG5qZXN0Lm1vY2soJ0Bhd3Mtc2RrL2NsaWVudC1iZWRyb2NrLXJ1bnRpbWUnLCAoKSA9PiAoe1xuICBCZWRyb2NrUnVudGltZUNsaWVudDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNlbmQ6IGplc3QuZm4oKVxuICB9KSksXG4gIEludm9rZU1vZGVsQ29tbWFuZDogamVzdC5mbigpXG59KSk7XG5cbmplc3QubW9jaygnQGF3cy1zZGsvY2xpZW50LWJlZHJvY2snLCAoKSA9PiAoe1xuICBCZWRyb2NrQ2xpZW50OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgc2VuZDogamVzdC5mbigpXG4gIH0pKSxcbiAgTGlzdEZvdW5kYXRpb25Nb2RlbHNDb21tYW5kOiBqZXN0LmZuKClcbn0pKTtcblxuLy8gTW9jayBjb25zb2xlIG1ldGhvZHMgdG8gcmVkdWNlIG5vaXNlIGluIHRlc3RzXG5jb25zdCBvcmlnaW5hbENvbnNvbGUgPSB7IC4uLmNvbnNvbGUgfTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIC8vIFN1cHByZXNzIGNvbnNvbGUgb3V0cHV0IGluIHRlc3RzIHVubGVzcyBleHBsaWNpdGx5IG5lZWRlZFxuICBjb25zb2xlLmxvZyA9IGplc3QuZm4oKTtcbiAgY29uc29sZS53YXJuID0gamVzdC5mbigpO1xuICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIC8vIFJlc3RvcmUgY29uc29sZSBtZXRob2RzXG4gIGNvbnNvbGUubG9nID0gb3JpZ2luYWxDb25zb2xlLmxvZztcbiAgY29uc29sZS53YXJuID0gb3JpZ2luYWxDb25zb2xlLndhcm47XG4gIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbENvbnNvbGUuZXJyb3I7XG4gIFxuICAvLyBDbGVhciBhbGwgbW9ja3NcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG59KTtcblxuLy8gR2xvYmFsIHRlc3QgdXRpbGl0aWVzXG5nbG9iYWwudGVzdFV0aWxzID0ge1xuICAvLyBIZWxwZXIgdG8gd2FpdCBmb3IgYXN5bmMgb3BlcmF0aW9uc1xuICB3YWl0OiAobXM6IG51bWJlcikgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSksXG4gIFxuICAvLyBIZWxwZXIgdG8gY3JlYXRlIG1vY2sgZGF0ZXNcbiAgbW9ja0RhdGU6IChkYXRlU3RyaW5nOiBzdHJpbmcpID0+IG5ldyBEYXRlKGRhdGVTdHJpbmcpLFxuICBcbiAgLy8gSGVscGVyIHRvIGdlbmVyYXRlIHRlc3QgSURzXG4gIGdlbmVyYXRlVGVzdElkOiAoKSA9PiBgdGVzdC0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWBcbn07XG5cbi8vIEV4dGVuZCBKZXN0IG1hdGNoZXJzXG5leHBlY3QuZXh0ZW5kKHtcbiAgdG9CZVZhbGlkVVVJRChyZWNlaXZlZDogc3RyaW5nKSB7XG4gICAgY29uc3QgdXVpZFJlZ2V4ID0gL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQvaTtcbiAgICBjb25zdCBwYXNzID0gdXVpZFJlZ2V4LnRlc3QocmVjZWl2ZWQpO1xuICAgIFxuICAgIGlmIChwYXNzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gbm90IHRvIGJlIGEgdmFsaWQgVVVJRGAsXG4gICAgICAgIHBhc3M6IHRydWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBiZSBhIHZhbGlkIFVVSURgLFxuICAgICAgICBwYXNzOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIFxuICB0b0JlVmFsaWRFbWFpbChyZWNlaXZlZDogc3RyaW5nKSB7XG4gICAgY29uc3QgZW1haWxSZWdleCA9IC9eW15cXHNAXStAW15cXHNAXStcXC5bXlxcc0BdKyQvO1xuICAgIGNvbnN0IHBhc3MgPSBlbWFpbFJlZ2V4LnRlc3QocmVjZWl2ZWQpO1xuICAgIFxuICAgIGlmIChwYXNzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gbm90IHRvIGJlIGEgdmFsaWQgZW1haWxgLFxuICAgICAgICBwYXNzOiB0cnVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gdG8gYmUgYSB2YWxpZCBlbWFpbGAsXG4gICAgICAgIHBhc3M6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG5cbi8vIFR5cGUgZGVjbGFyYXRpb25zIGZvciBnbG9iYWwgdXRpbGl0aWVzXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciB0ZXN0VXRpbHM6IHtcbiAgICB3YWl0OiAobXM6IG51bWJlcikgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBtb2NrRGF0ZTogKGRhdGVTdHJpbmc6IHN0cmluZykgPT4gRGF0ZTtcbiAgICBnZW5lcmF0ZVRlc3RJZDogKCkgPT4gc3RyaW5nO1xuICB9O1xuICBcbiAgbmFtZXNwYWNlIGplc3Qge1xuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XG4gICAgICB0b0JlVmFsaWRVVUlEKCk6IFI7XG4gICAgICB0b0JlVmFsaWRFbWFpbCgpOiBSO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQge307Il19