"use strict";
/**
 * API server for the Investment AI Agent
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const path_1 = __importDefault(require("path"));
const proprietary_data_routes_1 = __importDefault(require("./routes/proprietary-data-routes"));
const web_search_routes_1 = __importDefault(require("./routes/web-search-routes"));
const auth_routes_1 = __importDefault(require("./routes/auth-routes"));
const user_profile_routes_1 = __importDefault(require("./routes/user-profile-routes"));
const investment_idea_routes_1 = __importDefault(require("./routes/investment-idea-routes"));
const feedback_routes_1 = __importDefault(require("./routes/feedback-routes"));
const frontend_routes_1 = __importDefault(require("./routes/frontend-routes"));
const audit_logging_1 = require("./middleware/audit-logging");
// Create Express app
const app = (0, express_1.default)();
// Middleware
app.use((0, cors_1.default)());
app.use(express_1.default.json());
app.use(express_1.default.urlencoded({ extended: true }));
// Audit and logging middleware
app.use(audit_logging_1.auditContextMiddleware);
app.use(audit_logging_1.requestLoggingMiddleware);
// Serve static files from frontend directory
app.use('/static', express_1.default.static(path_1.default.join(__dirname, '../frontend')));
// API Routes
app.use('/api/auth', auth_routes_1.default);
app.use('/api/profile', user_profile_routes_1.default);
app.use('/api/proprietary-data', proprietary_data_routes_1.default);
app.use('/api/web-search', web_search_routes_1.default);
app.use('/api/v1/ideas', investment_idea_routes_1.default);
app.use('/api/v1/feedback', feedback_routes_1.default);
// Frontend Routes (serve the investment idea request interface)
app.use('/', frontend_routes_1.default);
// Health check endpoint
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
});
// Error handling middleware
app.use(audit_logging_1.auditErrorMiddleware);
app.use((err, req, res, next) => {
    console.error('Unhandled error:', err);
    res.status(500).json({
        error: 'Internal server error',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});
exports.default = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7OztBQUVILHNEQUE4QjtBQUM5QixnREFBd0I7QUFDeEIsZ0RBQXdCO0FBQ3hCLCtGQUFxRTtBQUNyRSxtRkFBeUQ7QUFDekQsdUVBQThDO0FBQzlDLHVGQUE2RDtBQUM3RCw2RkFBbUU7QUFDbkUsK0VBQXNEO0FBQ3RELCtFQUFzRDtBQUN0RCw4REFJb0M7QUFFcEMscUJBQXFCO0FBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO0FBRXRCLGFBQWE7QUFDYixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUEsY0FBSSxHQUFFLENBQUMsQ0FBQztBQUNoQixHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVoRCwrQkFBK0I7QUFDL0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0IsQ0FBQyxDQUFDO0FBQ2hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsd0NBQXdCLENBQUMsQ0FBQztBQUVsQyw2Q0FBNkM7QUFDN0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXhFLGFBQWE7QUFDYixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxxQkFBVSxDQUFDLENBQUM7QUFDakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsNkJBQWlCLENBQUMsQ0FBQztBQUMzQyxHQUFHLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLGlDQUFxQixDQUFDLENBQUM7QUFDeEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSwyQkFBZSxDQUFDLENBQUM7QUFDNUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsZ0NBQW9CLENBQUMsQ0FBQztBQUMvQyxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLHlCQUFjLENBQUMsQ0FBQztBQUU1QyxnRUFBZ0U7QUFDaEUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUseUJBQWMsQ0FBQyxDQUFDO0FBRTdCLHdCQUF3QjtBQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsNEJBQTRCO0FBQzVCLEdBQUcsQ0FBQyxHQUFHLENBQUMsb0NBQW9CLENBQUMsQ0FBQztBQUM5QixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBUSxFQUFFLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQixFQUFFLEVBQUU7SUFDNUYsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2QyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNuQixLQUFLLEVBQUUsdUJBQXVCO1FBQzlCLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVM7S0FDMUUsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBzZXJ2ZXIgZm9yIHRoZSBJbnZlc3RtZW50IEFJIEFnZW50XG4gKi9cblxuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHByb3ByaWV0YXJ5RGF0YVJvdXRlcyBmcm9tICcuL3JvdXRlcy9wcm9wcmlldGFyeS1kYXRhLXJvdXRlcyc7XG5pbXBvcnQgd2ViU2VhcmNoUm91dGVzIGZyb20gJy4vcm91dGVzL3dlYi1zZWFyY2gtcm91dGVzJztcbmltcG9ydCBhdXRoUm91dGVzIGZyb20gJy4vcm91dGVzL2F1dGgtcm91dGVzJztcbmltcG9ydCB1c2VyUHJvZmlsZVJvdXRlcyBmcm9tICcuL3JvdXRlcy91c2VyLXByb2ZpbGUtcm91dGVzJztcbmltcG9ydCBpbnZlc3RtZW50SWRlYVJvdXRlcyBmcm9tICcuL3JvdXRlcy9pbnZlc3RtZW50LWlkZWEtcm91dGVzJztcbmltcG9ydCBmZWVkYmFja1JvdXRlcyBmcm9tICcuL3JvdXRlcy9mZWVkYmFjay1yb3V0ZXMnO1xuaW1wb3J0IGZyb250ZW5kUm91dGVzIGZyb20gJy4vcm91dGVzL2Zyb250ZW5kLXJvdXRlcyc7XG5pbXBvcnQgeyBcbiAgYXVkaXRDb250ZXh0TWlkZGxld2FyZSwgXG4gIHJlcXVlc3RMb2dnaW5nTWlkZGxld2FyZSwgXG4gIGF1ZGl0RXJyb3JNaWRkbGV3YXJlIFxufSBmcm9tICcuL21pZGRsZXdhcmUvYXVkaXQtbG9nZ2luZyc7XG5cbi8vIENyZWF0ZSBFeHByZXNzIGFwcFxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBNaWRkbGV3YXJlXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuXG4vLyBBdWRpdCBhbmQgbG9nZ2luZyBtaWRkbGV3YXJlXG5hcHAudXNlKGF1ZGl0Q29udGV4dE1pZGRsZXdhcmUpO1xuYXBwLnVzZShyZXF1ZXN0TG9nZ2luZ01pZGRsZXdhcmUpO1xuXG4vLyBTZXJ2ZSBzdGF0aWMgZmlsZXMgZnJvbSBmcm9udGVuZCBkaXJlY3RvcnlcbmFwcC51c2UoJy9zdGF0aWMnLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vZnJvbnRlbmQnKSkpO1xuXG4vLyBBUEkgUm91dGVzXG5hcHAudXNlKCcvYXBpL2F1dGgnLCBhdXRoUm91dGVzKTtcbmFwcC51c2UoJy9hcGkvcHJvZmlsZScsIHVzZXJQcm9maWxlUm91dGVzKTtcbmFwcC51c2UoJy9hcGkvcHJvcHJpZXRhcnktZGF0YScsIHByb3ByaWV0YXJ5RGF0YVJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL3dlYi1zZWFyY2gnLCB3ZWJTZWFyY2hSb3V0ZXMpO1xuYXBwLnVzZSgnL2FwaS92MS9pZGVhcycsIGludmVzdG1lbnRJZGVhUm91dGVzKTtcbmFwcC51c2UoJy9hcGkvdjEvZmVlZGJhY2snLCBmZWVkYmFja1JvdXRlcyk7XG5cbi8vIEZyb250ZW5kIFJvdXRlcyAoc2VydmUgdGhlIGludmVzdG1lbnQgaWRlYSByZXF1ZXN0IGludGVyZmFjZSlcbmFwcC51c2UoJy8nLCBmcm9udGVuZFJvdXRlcyk7XG5cbi8vIEhlYWx0aCBjaGVjayBlbmRwb2ludFxuYXBwLmdldCgnL2hlYWx0aCcsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN0YXR1czogJ29rJyB9KTtcbn0pO1xuXG4vLyBFcnJvciBoYW5kbGluZyBtaWRkbGV3YXJlXG5hcHAudXNlKGF1ZGl0RXJyb3JNaWRkbGV3YXJlKTtcbmFwcC51c2UoKGVycjogYW55LCByZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgZXJyb3I6JywgZXJyKTtcbiAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICBtZXNzYWdlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGVyci5tZXNzYWdlIDogdW5kZWZpbmVkXG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFwcDsiXX0=