"use strict";
// Feedback models and interfaces
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateFeedbackPriority = exports.determineFeedbackSentiment = exports.createFeedbackId = exports.validateFeedback = void 0;
// Validation functions
const validateFeedback = (feedback) => {
    const errors = [];
    // Required fields
    if (!feedback.userId)
        errors.push('User ID is required');
    if (!feedback.feedbackType)
        errors.push('Feedback type is required');
    if (!feedback.category)
        errors.push('Category is required');
    if (!feedback.title)
        errors.push('Title is required');
    if (!feedback.description)
        errors.push('Description is required');
    // Rating validation
    if (feedback.rating === undefined || feedback.rating === null) {
        errors.push('Rating is required');
    }
    else if (!Number.isInteger(feedback.rating) || feedback.rating < 1 || feedback.rating > 5) {
        errors.push('Rating must be an integer between 1 and 5');
    }
    // Type validations
    const validFeedbackTypes = [
        'investment-idea-quality',
        'analysis-accuracy',
        'system-performance',
        'user-experience',
        'feature-request',
        'bug-report',
        'general'
    ];
    if (feedback.feedbackType && !validFeedbackTypes.includes(feedback.feedbackType)) {
        errors.push('Invalid feedback type');
    }
    const validCategories = [
        'accuracy',
        'relevance',
        'completeness',
        'timeliness',
        'usability',
        'performance',
        'compliance',
        'other'
    ];
    if (feedback.category && !validCategories.includes(feedback.category)) {
        errors.push('Invalid category');
    }
    // String length validations
    if (feedback.title && feedback.title.length > 200) {
        errors.push('Title must be 200 characters or less');
    }
    if (feedback.description && feedback.description.length > 2000) {
        errors.push('Description must be 2000 characters or less');
    }
    // Array validations
    if (feedback.tags && !Array.isArray(feedback.tags)) {
        errors.push('Tags must be an array');
    }
    return {
        valid: errors.length === 0,
        errors
    };
};
exports.validateFeedback = validateFeedback;
const createFeedbackId = () => {
    return `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};
exports.createFeedbackId = createFeedbackId;
const determineFeedbackSentiment = (rating, description) => {
    // Simple sentiment analysis based on rating and keywords
    if (rating >= 4)
        return 'positive';
    if (rating <= 2)
        return 'negative';
    // For neutral ratings (3), analyze description for sentiment keywords
    const positiveKeywords = ['good', 'great', 'excellent', 'helpful', 'useful', 'accurate', 'fast'];
    const negativeKeywords = ['bad', 'poor', 'terrible', 'slow', 'inaccurate', 'confusing', 'broken'];
    const lowerDescription = description.toLowerCase();
    const positiveCount = positiveKeywords.filter(word => lowerDescription.includes(word)).length;
    const negativeCount = negativeKeywords.filter(word => lowerDescription.includes(word)).length;
    if (positiveCount > negativeCount)
        return 'positive';
    if (negativeCount > positiveCount)
        return 'negative';
    return 'neutral';
};
exports.determineFeedbackSentiment = determineFeedbackSentiment;
const calculateFeedbackPriority = (feedback) => {
    // Priority calculation based on multiple factors
    let score = 0;
    // Rating impact
    if (feedback.rating <= 2)
        score += 3;
    else if (feedback.rating === 3)
        score += 1;
    // Type impact
    if (feedback.feedbackType === 'bug-report')
        score += 2;
    if (feedback.feedbackType === 'system-performance')
        score += 2;
    if (feedback.feedbackType === 'analysis-accuracy')
        score += 2;
    // Category impact
    if (feedback.category === 'accuracy')
        score += 2;
    if (feedback.category === 'compliance')
        score += 3;
    if (feedback.category === 'performance')
        score += 1;
    // Sentiment impact
    if (feedback.sentiment === 'negative')
        score += 1;
    if (score >= 5)
        return 'high';
    if (score >= 3)
        return 'medium';
    return 'low';
};
exports.calculateFeedbackPriority = calculateFeedbackPriority;
//# sourceMappingURL=data:application/json;base64,