"use strict";
/**
 * Service interfaces for communication between components
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,